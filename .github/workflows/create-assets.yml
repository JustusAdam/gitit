name: Create Assets

on:
  release:
    types: [published]

env:
  PROGRAM: gitit
  EXTRA_ASSETS: plugins static templates data LICENSE YUI-LICENSE
  PROXY: unix-proxy.sh
  HIDDEN_BIN: gitit-bin

jobs:
  create-assets:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Cache build tools and libraries
      uses: actions/cache@v2
      env:
        cache-name: cache-tools-and-libraries
      with:
        path: ~/.stack
        key: ${{ runner.os }}-ca-${{ env.cache-name }}-${{ hashFiles('**/stack.yaml.lock') }}
        restore-keys: |
          ${{ runner.os }}-ca-${{ env.cache-name }}-
          ${{ runner.os }}-ca-
          ${{ runner.os }}-

    - name: Build the project
      run: stack build --ghc-options=-rtsopts

      # This also renames the program name and instead injects a proxy shell
      # script that takes care of overriding the cabal inserted paths before
      # running the actual program
    # - name: Tar and strip the binary
    #   run: |
    #     mv `stack exec -- which $PROGRAM` $HIDDEN_BIN
    #     mkdir gitit
    #     mv $PROXY gitit/$PROGRAM
    #     mv $HIDDEN_BIN $EXTRA_ASSETS gitit
    #     tar -cavf program.tar.gz gitit

    # - name: Upload assets
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ github.event.release.upload_url }}
    #     asset_path: ./gitit.tar.gz
    #     asset_name: gitit-${{ runner.os }}.tar.gz
    #     asset_content_type: application/tar.gz
